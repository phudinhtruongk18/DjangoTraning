- VIEW 

    class FileDirectUploadApi(ApiAuthMixin, APIView):
        def post(self, request):
            service = FileDirectUploadService(
                user=request.user,
                file_obj=request.FILES["file"]
            )
            file = service.create()

            return Response(data={"id": file.id}, status=status.HTTP_201_CREATED)

- SERVICE
class FileStandardUploadService:
    """
    This also serves as an example of a service class,
    which encapsulates 2 different behaviors (create & update) under a namespace.

    Meaning, we use the class here for:

    1. The namespace
    2. The ability to reuse `_infer_file_name_and_type` (which can also be an util)
    """
    def __init__(self, user: BaseUser, file_obj):
        self.user = user
        self.file_obj = file_obj

    def _infer_file_name_and_type(self, file_name: str = "", file_type: str = "") -> Tuple[str, str]:
        if not file_name:
            file_name = self.file_obj.name

        if not file_type:
            guessed_file_type, encoding = mimetypes.guess_type(file_name)

            if guessed_file_type is None:
                file_type = ""
            else:
                file_type = guessed_file_type

        return file_name, file_type

    @transaction.atomic
    def create(self, file_name: str = "", file_type: str = "") -> File:
        _validate_file_size(self.file_obj)

        file_name, file_type = self._infer_file_name_and_type(file_name, file_type)

        obj = File(
            file=self.file_obj,
            original_file_name=file_name,
            file_name=file_generate_name(file_name),
            file_type=file_type,
            uploaded_by=self.user,
            upload_finished_at=timezone.now()
        )

        obj.full_clean()
        obj.save()

        return obj

    @transaction.atomic
    def update(self, file: File, file_name: str = "", file_type: str = "") -> File:
        _validate_file_size(self.file_obj)

        file_name, file_type = self._infer_file_name_and_type(file_name, file_type)

        file.file = self.file_obj
        file.original_file_name = file_name
        file.file_name = file_generate_name(file_name)
        file.file_type = file_type
        file.uploaded_by = self.user
        file.upload_finished_at = timezone.now()

        file.full_clean()
        file.save()

        return file

- ADMIN
    @admin.register(File)
    class FileAdmin(admin.ModelAdmin):
        # ... other code here ...
        # https://github.com/HackSoftware/Django-Styleguide-Example/blob/master/styleguide_example/files/admin.py 

        def save_model(self, request, obj, form, change):
            try:
                cleaned_data = form.cleaned_data

                service = FileDirectUploadService(
                    file_obj=cleaned_data["file"],
                    user=cleaned_data["uploaded_by"]
                )

                if change:
                    service.update(file=obj)
                else:
                    service.create()
            except ValidationError as exc:
                self.message_user(request, str(exc), messages.ERROR)

- TEST WITHOUT TOUCHING DATABASES
    """
    from datetime import timedelta

    from django.test import TestCase
    from django.core.exceptions import ValidationError
    from django.utils import timezone

    from project.some_app.models import Course


    class CourseTests(TestCase):
        def test_course_end_date_cannot_be_before_start_date(self):
            start_date = timezone.now()
            end_date = timezone.now() - timedelta(days=1)

            course = Course(start_date=start_date, end_date=end_date)

            with self.assertRaises(ValidationError):
                course.full_clean()
    """
- SERVICE TEST
    """
    from django_styleguide.payments.services import item_buy
    from django_styleguide.payments.models import Payment, Item


    class ItemBuyTests(TestCase):
        def setUp(self):
            self.user = User.objects.create_user(username='Test User')
            self.item = Item.objects.create(
                name='Test Item',
                description='Test Item description',
                price=10.15
            )

        @patch('project.payments.services.items_get_for_user')
        def test_buying_item_that_is_already_bought_fails(self, items_get_for_user_mock):
            """
            Since we already have tests for `items_get_for_user`,
            we can safely mock it here and give it a proper return value.
            """
            items_get_for_user_mock.return_value = [self.item]

            with self.assertRaises(ValidationError):
                item_buy(user=self.user, item=self.item)

        @patch('project.payments.services.payment_charge.delay')
        def test_buying_item_creates_a_payment_and_calls_charge_task(
            self,
            payment_charge_mock
        ):
            self.assertEqual(0, Payment.objects.count())

            payment = item_buy(user=self.user, item=self.item)

            self.assertEqual(1, Payment.objects.count())
            self.assertEqual(payment, Payment.objects.first())

            self.assertFalse(payment.successful)

            payment_charge_mock.assert_called()
    """

- SIMPLE API VIEW

    !!! Keep in mind this API is public by default. Authentication is up to you.


    """
    from rest_framework.views import APIView
    from rest_framework import serializers
    from rest_framework.response import Response

    from styleguide_example.users.selectors import user_list
    from styleguide_example.users.models import BaseUser


    class UserListApi(APIView):
        class OutputSerializer(serializers.Serializer):
            id = serializers.CharField()
            email = serializers.CharField()

        def get(self, request):
            users = user_list()

            data = self.OutputSerializer(users, many=True).data

            return Response(data)
    """

    That's why, we take the following approach:
        Selectors take care of the actual filtering.
        APIs take care of filter parameter serialization.
        If you need some of the generic paginations, provided by DRF, the API should take care of that.
        If you need a different pagination, or you are implementing it yourself, either add a new layer to handle pagination or let the selector do that for you.


- RELY IN pagination 
    """
    from rest_framework.views import APIView
    from rest_framework import serializers

    from styleguide_example.api.mixins import ApiErrorsMixin
    from styleguide_example.api.pagination import get_paginated_response, LimitOffsetPagination

    from styleguide_example.users.selectors import user_list
    from styleguide_example.users.models import BaseUser


    class UserListApi(ApiErrorsMixin, APIView):
        class Pagination(LimitOffsetPagination):
            default_limit = 1

        class FilterSerializer(serializers.Serializer):
            id = serializers.IntegerField(required=False)
            # Important: If we use BooleanField, it will default to False
            is_admin = serializers.NullBooleanField(required=False)
            email = serializers.EmailField(required=False)

        class OutputSerializer(serializers.Serializer):
            id = serializers.CharField()
            email = serializers.CharField()
            is_admin = serializers.BooleanField()

        def get(self, request):
            # Make sure the filters are valid, if passed
            filters_serializer = self.FilterSerializer(data=request.query_params)
            filters_serializer.is_valid(raise_exception=True)

            users = user_list(filters=filters_serializer.validated_data)

            return get_paginated_response(
                pagination_class=self.Pagination,
                serializer_class=self.OutputSerializer,
                queryset=users,
                request=request,
                view=self
            )
    """
    
- URL 
    from django.urls import path, include

    from project.education.apis import (
        CourseCreateApi,
        CourseUpdateApi,
        CourseListApi,
        CourseDetailApi,
        CourseSpecificActionApi,
    )


    course_patterns = [
        path('', CourseListApi.as_view(), name='list'),
        path('<int:course_id>/', CourseDetailApi.as_view(), name='detail'),
        path('create/', CourseCreateApi.as_view(), name='create'),
        path('<int:course_id>/update/', CourseUpdateApi.as_view(), name='update'),
        path(
            '<int:course_id>/specific-action/',
            CourseSpecificActionApi.as_view(),
            name='specific-action'
        ),
    ]

    urlpatterns = [
        path('courses/', include((course_patterns, 'courses'))),
    ]
    
- Here's how project.tasks.management.commands.setup_periodic_tasks.py looks like:
    """
    from django.core.management.base import BaseCommand
    from django.db import transaction

    from django_celery_beat.models import IntervalSchedule, CrontabSchedule, PeriodicTask

    from project.app.tasks import some_periodic_task


    class Command(BaseCommand):
        help = f"""
        Setup celery beat periodic tasks.

        Following tasks will be created:

        - {some_periodic_task.name}
        """

        @transaction.atomic
        def handle(self, *args, **kwargs):
            print('Deleting all periodic tasks and schedules...\n')

            IntervalSchedule.objects.all().delete()
            CrontabSchedule.objects.all().delete()
            PeriodicTask.objects.all().delete()

            periodic_tasks_data = [
                {
                    'task': some_periodic_task
                    'name': 'Do some peridoic stuff',
                    # https://crontab.guru/#15_*_*_*_*
                    'cron': {
                        'minute': '15',
                        'hour': '*',
                        'day_of_week': '*',
                        'day_of_month': '*',
                        'month_of_year': '*',
                    },
                    'enabled': True
                },
            ]

            for periodic_task in periodic_tasks_data:
                print(f'Setting up {periodic_task["task"].name}')

                cron = CrontabSchedule.objects.create(
                    **periodic_task['cron']
                )

                PeriodicTask.objects.create(
                    name=periodic_task['name'],
                    task=periodic_task['task'].name,
                    crontab=cron,
                    enabled=periodic_task['enabled']
                )
        """
