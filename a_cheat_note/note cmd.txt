account:
    admin
    phu.truong@hdwebsoft.io
    123123

git:
    git clone https://github.com/LondonAppDeveloper/deploy-django-with-docker-compose --config core.autocrlf=false
    # stuck in this shit when deploy in docker
    # https://stackoverflow.com/a/53165472/13226749 this this one


cmd:
    docker-compose build

    docker-compose run --rm app sh -c "django-admin startproject app ."
    docker-compose run --rm app sh -c "python manage.py createsuperuser"

    docker-compose -f docker-compose-deploy.yml down --volumes
    docker-compose down --volumes --remove-orphans flag
    # TAKE IT DOWN (cause make some error with the one before)

    docker-compose -f docker-compose-deploy.yml build
    docker-compose -f docker-compose-deploy.yml up

% tam thoi bo dong nay o db
restart: always

{
python manage.py makemigrations user &&
python manage.py makemigrations category &&
python manage.py makemigrations product &&
python manage.py makemigrations comment &&
python manage.py makemigrations healchecker &&
python manage.py makemigrations mail &&
}

do this in cmd in celery compose

% tam thoi bo dong nay o db
# RUN apk update && apk add libpq

# atomic transaction
{
'ATOMIC_REQUESTS': True,   in DATABASES in setting
    from django.db import transaction

    def viewfunc(request):
    # This code executes in autocommit mode (Django's default).
    do_stuff()

    with transaction.atomic():
    # This code executes inside a transaction.
    do_more_stuff()
}

# Run all the tests in the animals.tests module
$ ./manage.py test animals.tests


# one line admin register
echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser(username='admin',email='admin@myproject.com', password='123123')" | python manage.py shell
echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser(email='phudinhtruongk18@gmail.com', password='123123',first_name='Dinh',last_name='Phu',username='admin')" | python manage.py shell

# DELETE AN APP 
    Step 1: empty the app, but leave it installed
    remove all files from the app, except the folder "migrations"

    Execute this command:
    python manage.py makemigrations -n drop_all_tables my_app_to_remove
    Leave my_app_to_remove in the file "settings.py".
    Step 2: Deploy the changes
    Update all projects. Tell the team mates to update their project and to run the migrations.
    Step 3: remove "my_app_to_remove" from settings.py
    Now remove "my_app_to_remove" from settings.py and deploy again.


# </========================================================================>
# </=======================REST GO BELOW=========================>
# </========================================================================>

# The settings of this app (DRF) are:

    # DRFSO2_PROPRIETARY_BACKEND_NAME: name of your OAuth2 social backend (e.g "Facebook"), defaults to "Django"
    # DRFSO2_URL_NAMESPACE: namespace for reversing URLs
    # ACTIVATE_JWT: If set to True the access and refresh tokens will be JWTed. Default is False.

    # Setting Up a New Application
    # Go to Django admin and add a new Application with the following configuration:

    # client_id and client_secret should be left unchanged
    # user should be your superuser
    # redirect_uris should be left blank
    # client_type should be set to confidential
    # authorization_grant_type should be set to 'Resource owner password-based'
    # name can be set to whatever you'd like

    # # in your settings.py file.
    # from oauth2_provider import settings as oauth2_settings

    # # expires in 6 months
    # oauth2_settings.DEFAULTS['ACCESS_TOKEN_EXPIRE_SECONDS'] = 1.577e7

if your signals is not connected around apps, you can place it on your models.py. 
But if you are using it to connect different apps, or a common signal to multiple apps, 
you can should have a separated file to place.


{
    "access_token": "JLBWtnFoyMnyzuk3w5MF5lgaQEoRI1",
    "expires_in": 36000,
    "token_type": "Bearer",
    "scope": "read write",
    "refresh_token": "P0Dz2ZwRfymIfmhgq3fyjmeWMKcB7p"
}

indexes = [
            models.Index(fields=['last_name', 'first_name']),
            models.Index(fields=['first_name'], name='first_name_idx'),
        ]
 tìm kiếm theo cây nhị phân, chia tên thành các node
 
cd client_test
python -m http.server 6969


git checkout -b "thanhcua"
git branch -D thanhcua

git pull
git push
commit
rebase
stash

như trong serializer có thêm create, save, vallidate function nữa á



SIMPLE JWT
or
drf_social_oauth2

refactor api url
config swagger
atomic transaction

add not exist categories

transaction can su dung khi nao can thiet (dat hang, tien bac, dang ki mon,may bay) -> vi can tinh toan ven

sudung trong bai:
    - edit (khi 2 nguoi dung cung sua 1 san pham)
    - quantiny (add)
nhuoc diem transaction: 
    - su dung bo nho dem (chua check)
    - co kha nang deadlock (1 need 2, 2 need 1) (chua gap)


hyperlink co the viet 1 model tach biet de co the de dang trong viet tach xuat thong tin

    Because the behavior of nested creates and updates can be ambiguous, and may require complex dependencies 
    between related models, REST framework 3 requires you to always write these methods explicitly. The default 
    ModelSerializer .create() and .update() methods do not include support for writable nested representations.

    There are however, third-party packages available such as DRF Writable Nested that support automatic writable 
    nested representations.
